#Uncomment for testing: /var/cfengine/bin/cf-agent -K -I -f <full_path>
#body common control {
# bundlesequence => { "sys_packages" };
#
# inputs => { 
#            "cfengine_stdlib.cf", 
#            "globals.cf"
#           };
#}


bundle agent sys_packages
{

vars:

 "packages_ifelapsed" int => "240";
 

 "core_packages" slist => {
	"vim-common",
	"vim-minimal",
	"vim-X11",
	"vim-enhanced",
	"createrepo",
	"mkisofs",
	"rpmdevtools",
 };
 
 "dev_packages" slist => {
	"readline-devel",
	"zlib-devel",
	"gdbm-devel",
	"sqlite-devel",
	"bzip2-devel",
	"openssl-devel",
	"httpd-devel",
	"boost-devel",
    "glib2-devel",
    "ncurses-devel",
    "compat-libevent14-devel",
    "tcl-devel",
	"git",
	"subversion"
 };

 "thirty_packages" slist => {
	"python27",
	"python27-devel",
    "Django",
    "Python27-mod_wsgi",
    "psycopg2",
    "nodejs",
    "thrift",
    "maven2",
    "Sqlite",
    "Sqlite-devel",
    "zeromq",
    "zeromq-devel",
    "mongrel2",
    "cfengine-community"
 };

 "all_packages" slist => {
	@(core_packages),
	@(dev_packages),
 };

classes:
 "sysgrp_cfengine" expression => classmatch("sysgrp_cfengine_.*");

packages:
 sysgrp_cfengine::
  "$(all_packages)"
    comment => "Install localdev packages",
    action => if_elapsed("$(globals.default_ifelapsed)"),
    package_policy => "add",
    package_method => yum_ifelapsed;
  
  "java-1"
    comment => "Install java-1.6.0-devel",
    action => if_elapsed("$(globals.default_ifelapsed)"),
    package_policy => "add",
    package_version => "*",
    package_architectures => { "6.0-openjdk-devel.x86_64" },
    package_method => yum_ifelapsed;

  "$(thirty_packages)"
    comment => "Install 30and30 packages",
    action => if_elapsed("$(globals.default_ifelapsed)"),
    package_policy => "add",
    package_method => yum_30and30_repo;
}



bundle agent sys_packages_rpm_multiversion(app, app_version, app_release, app_arch)
{
packages:
  "$(app)"
    comment => "Install multiversion package",
    action => if_elapsed("$(globals.default_ifelapsed)"),
    classes => if_ok("package_failure"),
    package_policy => "addupdate",
    package_version => "$(app_version)-$(app_release)",
    package_architectures => { "$(app_arch)" },
    package_method => rpm_multiversion("$(globals.rpm_repo)"); 

commands:
 #if the above packages promise fails then install the rpm manually.
 #above packages promise will only fail if attempting to install an old version.
 #note that negation of if_ok is necessary, since no classes are defined at all in the case
 #where we're rolling back to an older version that is not currently installed.
 !package_failure::
   "/bin/rpm -i --oldpackage $(globals.rpm_repo)/$(app)-$(app_version)-$(app_release).$(app_arch).rpm";
}



body package_method yum_ifelapsed
{
package_changes => "bulk";
package_list_command => "/usr/bin/yum list installed";
package_patch_list_command => "/usr/bin/yum check-update";

# Remember to escape special characters like |

package_list_name_regex    => "([^.]+).*";
package_list_version_regex => "[^\s]\s+([^\s]+).*";
package_list_arch_regex    => "[^.]+\.([^\s]+).*";

package_installed_regex => ".*(installed|\s+@).*";
package_name_convention => "$(name).$(arch)";

# set it to "0" to avoid caching of list during upgrade
package_list_update_ifelapsed => "$(globals.default_package_ifelapsed)";

package_patch_installed_regex => "^\s.*";
package_patch_name_regex    => "([^.]+).*";
package_patch_version_regex => "[^\s]\s+([^\s]+).*";
package_patch_arch_regex    => "[^.]+\.([^\s]+).*";

package_add_command => "/usr/bin/yum -y install";
package_update_command => "/usr/bin/yum -y update";
package_delete_command => "/bin/rpm -e --nodeps";
package_verify_command => "/bin/rpm -V";
}

body package_method yum_30and30_repo
{
package_changes => "bulk";
package_list_command => "/usr/bin/yum list installed";
package_patch_list_command => "/usr/bin/yum check-update";

# Remember to escape special characters like |

package_list_name_regex    => "([^.]+).*";
package_list_version_regex => "[^\s]\s+([^\s]+).*";
package_list_arch_regex    => "[^.]+\.([^\s]+).*";

package_installed_regex => ".*(installed|\s+@).*";
package_name_convention => "$(name).$(arch)";

# set it to "0" to avoid caching of list during upgrade
package_list_update_ifelapsed => "$(globals.default_package_ifelapsed)";

package_patch_installed_regex => "^\s.*";
package_patch_name_regex    => "([^.]+).*";
package_patch_version_regex => "[^\s]\s+([^\s]+).*";
package_patch_arch_regex    => "[^.]+\.([^\s]+).*";

package_add_command => "/usr/bin/yum --disablerepo=* --enablerepo=30and30 -y install";
package_update_command => "/usr/bin/yum --disablerepo=* --enablerepo=30and30 -y update";
package_delete_command => "/bin/rpm -e --nodeps";
package_verify_command => "/bin/rpm -V";
}


body package_method rpm_ifelapsed(repo)
{
package_changes => "individual";

package_list_command => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";

# set it to "0" to avoid caching of list during upgrade
package_list_update_ifelapsed => "$(globals.default_package_ifelapsed)";

package_list_name_regex    => "[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_version_regex => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_arch_regex    => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

package_installed_regex => "i.*";

package_file_repositories => { "$(repo)" };

package_name_convention => "$(name)-$(version).$(arch).rpm";

package_add_command => "/bin/rpm -ivh ";
package_update_command => "/bin/rpm -Uvh ";
package_delete_command => "/bin/rpm -e --nodeps";
package_noverify_regex => ".*[^\s].*";
}



body package_method rpm_multiversion(repo)
{
package_changes => "individual";

package_list_command => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";

# set it to "0" to avoid caching of list during upgrade
package_list_update_ifelapsed => "$(globals.default_package_ifelapsed)";

package_list_name_regex    => "[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_version_regex => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_arch_regex    => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

package_installed_regex => "i.*";

package_file_repositories => { "$(repo)" };

package_name_convention => "$(name)-$(version).$(arch).rpm";

package_add_command => "/bin/rpm -ivh ";
#package_update_command => "/bin/rpm -Uvh ";
package_update_command => "/bin/rpm -ivh ";
package_delete_command => "/bin/rpm -e --nodeps";
package_noverify_regex => ".*[^\s].*";
}



body package_method rpm_multiversion_delete(repo)
{
package_changes => "individual";

package_list_command => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";

# set it to "0" to avoid caching of list during upgrade
package_list_update_ifelapsed => "$(globals.default_package_ifelapsed)";

package_list_name_regex    => "[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_version_regex => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s|]+).*";
package_list_arch_regex    => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

package_installed_regex => "i.*";

package_file_repositories => { "$(repo)" };

#package_name_convention => "$(name)-$(version).$(arch).rpm";
package_name_convention => "$(name)-$(version).$(arch)";

package_add_command => "/bin/rpm -ivh ";
#package_update_command => "/bin/rpm -Uvh ";
package_update_command => "/bin/rpm -ivh ";
package_delete_command => "/bin/rpm -e --nodeps";
package_noverify_regex => ".*[^\s].*";
}
